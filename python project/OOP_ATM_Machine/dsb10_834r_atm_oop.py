# -*- coding: utf-8 -*-
"""DSB10_834R_ATM-OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1av-wHWOUWRlXUC5ykEkKjSlTmXbSoBHS

# Homework Essential Python for DA
- write OOP to create ATM, with 4-5 method
    - attribute: name, bank, balance
    - method: login to ATM, check balance, deposit, withdrawn, transfer
    - Extra: create terminal like as a menu function for ATM.
"""

#create a simple ATM Class
class ATMmachine():
  def __init__(self, name, account_id, bank_name, balance, pincode):
    self.name = name
    self.account_id = account_id
    self.bank_name = bank_name
    self.balance = balance
    self.pincode = pincode

  #create string representation
  def __str__(self):
    return f"---\nName: {self.name}\nACC ID: {self.account_id}\nBank Name: {self.bank_name}\nBalance: {self.balance}\n---"

  #create login methods
  def logintoATM(self):
    #get input and change into string
    input_pin = input("Please enter pincode: ")
    if input_pin != self.pincode: #check the pincode
      print("Incorrect pincode. Please try again")
    else:
      print("Correct pincode.")
    return f"Welcome: {self.name}"

  #create check the balance method
  def check_balance(self):
    return f"---\nThe account current balance is: {self.balance}\n---"

  #create deposit methods
  def deposit(self, input_deposit):
    self.balance += input_deposit #Subtract from balance
    #tell remaining balance and ask to take money
    return f"---\nDeposit successful.\nAmount deposit: +{input_deposit}\nNew balance: {self.balance}\nPlease Take your money\n---"

  #create withdrawn methods
  def withdrawn(self, prefer_withdrawns):
    # Check the input amount first
    if prefer_withdrawns > self.balance: #Over balance
      return f"---\nInsufficient balance.\nInput amount: {prefer_withdrawns}\nCurrent balance: {self.balance}\n---"
    elif prefer_withdrawns <= 0: #Invalid amount
      return f"---\nInvalid amount.Please input again\nInput withdrawn: {prefer_withdrawns}\nCurrent balance: {self.balance}\n---"
    else: #Correct amount
      self.balance -= prefer_withdrawns
      return f"---\nWithdrawn successful.\nAmount withdrawn: -{prefer_withdrawns}\nNew balance: {self.balance}\n---"

  #create the transfer methods
  def transfer(self, input_transfer, destination_id):
    #check the input amount first
    if input_transfer > self.balance: #Over balance
      return f"---\nInsufficient balance.\nInput amount: {input_transfer}\nCurrent balance: {self.balance}\n---"
    elif input_transfer <= 0: #Invalid amount
      return f"---\nInvalid amount.Please input again\nInput transfer: {input_transfer}\nCurrent balance: {self.balance}\n---"
    else: #Correct amount
      #in case correct account ID
      print(f"Transfering to account: {destination_id}")
      self.balance -= input_transfer
      return f"Transfer successful.\nAmount transfer: -{input_transfer}\nNew balance: {self.balance}\n---"

#Declare the users of ATM machines
user1 = ATMmachine("Toy", "012345", "SCB", 10000, "090909")
user2 = ATMmachine("Yot", "543210", "KTB", 20000, "909090")
user3 = ATMmachine("ToyDog", "987654", "KBANK", 50000, "112358")
user4 = ATMmachine("YotCat", "456789", "KBANK", 100000, "147258")

#keep users in the list for future use
AllBankACC = [user1,user2,user3,user4]

#We can write the terminal function for using atm machine from here
def ATMterminal(user):
  print("Welcome to ATM Machine")
  #user already insert card
  #had user login first
  resultlogin = user.logintoATM()
  #check the pincode
  if resultlogin == f"Welcome: {user.name}":
    print(user)
  else:
    return "Incorrect pincode, Card push out"

  #loop over all from here to repeat select after finish each transaction
  while True:
    #user already login
    #Give user choice to select function
    print("Please select your transcation:\n1. Check balance\n2. Deposit\n3. Withdraw\n4. Transfer\n5. Abort")
    choice = input("Enter your choice: ")
    while choice not in ["1", "2", "3", "4","5"]:
      print("Invalid choice. Please try again.")
      choice = input("Enter your choice: ")
    #Go to each menu for each choice
    if choice == "1":
      #just print the balance
      print(user.check_balance())
    elif choice == "2":
      deposit = int(input("Enter amount to deposit: "))
      print(user.deposit(deposit))
    elif choice == "3":
      withdraw = int(input("Enter amount to withdraw: "))
      print(user.withdrawn(withdraw))
    elif choice == "4":
      transfer = int(input("Enter amount to transfer: "))
      destination_id = input("Enter destination account ID: ")
      #create new list without user
      newAllBankACC = [dest_user for dest_user in AllBankACC if dest_user != user]
      #check the destination account ID
      while destination_id not in [dest_user.account_id for dest_user in newAllBankACC]:
        print("Invalid account ID. Please try again.")
        destination_id = input("Enter destination account ID: ")
      #if found destination id deposit to account with destination id
      for dest_user in newAllBankACC:
        if dest_user.account_id == destination_id:
          #deposit the amount of transfer into destination account
          dest_user.deposit(transfer)
          print(f"Destination Account Name: {dest_user.name}\nDestination Bank Name: {dest_user.bank_name}")
          break
      print(user.transfer(transfer, destination_id))
    elif choice == "5":
      print("Transaction aborted.")
      break
    else:
      print("Invalid choice. Please try again. Card push out")

#Use terminal function to access atm machine of user1 (or other user)
ATMterminal(user1)

#This part is for testing each methods of ATMmachines
print(user1)
user1.logintoATM()
#in case of corrected pincode
print(user1.check_balance())
print(user1.deposit(2000))
print(user1.withdrawn(1000))
print(user1.transfer(5000, "543210"))

